AWSTemplateFormatVersion: 2010-09-09
Description: >-
  ticketear
Transform:
- AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: The stage for the deployment (e.g., dev, test, prod)

Globals:
  Function:
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        STAGE: !Ref Stage
        SALES_TABLE: !Ref SalesTable
        REDIS_URL: !GetAtt RedisCluster.RedisEndpoint.Address
        REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
        SQS_QUEUE_URL: !GetAtt SQSQueue.QueueUrl
        SQS_QUEUE_NAME: !GetAtt SQSQueue.QueueName
        SQS_QUEUE_ARN: !GetAtt SQSQueue.Arn
    VpcConfig:
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet1
      SecurityGroupIds:
        - !Ref RedisSecurityGroup
    Runtime: nodejs20.x
    MemorySize: 128
    Timeout: 30
    Architectures:
      - arm64

Resources:
  ################################
  #####  Lambdas Resources   #####
  ################################
  GetGetIntoWaitingQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-get-into-waiting-queue.handler
      CodeUri: ../dist/handlers/
      Policies:
        - AWSLambda_FullAccess
        - AmazonElastiCacheFullAccess  
        - AWSLambdaVPCAccessExecutionRole  
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesTable
        - SQSPollerPolicy:
            QueueName: !GetAtt SQSQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSQueue.QueueName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessCrudApi
            Path: /get-into-waiting-queue
            Method: GET
  
  GetCheckWaitingQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-check-waiting-queue.handler
      CodeUri: ../dist/handlers/
      Policies:
        - AWSLambda_FullAccess
        - AmazonElastiCacheFullAccess  
        - AWSLambdaVPCAccessExecutionRole  
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesTable
        - SQSPollerPolicy:
            QueueName: !GetAtt SQSQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSQueue.QueueName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessCrudApi
            Path: /get-check-waiting-queue/{uuid}
            Method: GET

  GetMemoryState:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-get-memory-state.handler
      CodeUri: ../dist/handlers/
      Policies:
        - AWSLambda_FullAccess
        - AmazonElastiCacheFullAccess  
        - AWSLambdaVPCAccessExecutionRole  
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesTable
        - SQSPollerPolicy:
            QueueName: !GetAtt SQSQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSQueue.QueueName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessCrudApi
            Path: /get-memory-state
            Method: GET

  ClearnMemoryState:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-clean-memory-state.handler
      CodeUri: ../dist/handlers/
      Policies:
        - AWSLambda_FullAccess
        - AmazonElastiCacheFullAccess  
        - AWSLambdaVPCAccessExecutionRole  
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesTable
        - SQSPollerPolicy:
            QueueName: !GetAtt SQSQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSQueue.QueueName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessCrudApi
            Path: /clean-memory-state
            Method: GET

  PostMakePayment:
    Type: AWS::Serverless::Function
    Properties:
      Handler: post-make-payment.handler
      CodeUri: ../dist/handlers/
      Policies:
        - AWSLambda_FullAccess
        - AmazonElastiCacheFullAccess  
        - AWSLambdaVPCAccessExecutionRole  
        - AWSLambdaSQSQueueExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref SalesTable
        - SQSPollerPolicy:
            QueueName: !GetAtt SQSQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSQueue.QueueName
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref ServerlessCrudApi
            Path: /make-payment/{uuid}
            Method: GET
  
  SQSQueueProcessFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: sqs-queue-process.handler
      CodeUri: ../dist/handlers/
      Policies:
        - AWSLambda_FullAccess
        - AmazonElastiCacheFullAccess  
        - AWSLambdaVPCAccessExecutionRole
        - AWSLambdaSQSQueueExecutionRole
        - SQSPollerPolicy:
            QueueName: !GetAtt SQSQueue.QueueName
        - SQSSendMessagePolicy:
            QueueName: !GetAtt SQSQueue.QueueName
      Events:
        SQSQueue:
          Type: SQS
          Properties:
            Queue: !GetAtt SQSQueue.Arn
            BatchSize: 1

  ################################
  #####     EVA Services     #####
  ################################

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: general-queue
  
  ################################
  ##### Databases Resources  #####
  ################################

  SalesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: SalesTable
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    
  RedisCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      CacheNodeType: cache.t2.micro
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      CacheSubnetGroupName: !Ref CacheSubnetGroup

  ################################
  ##### Networking Resources #####
  ################################

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24

  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: '10.0.2.0/24'

  CacheSubnetGroup:
    Type: 'AWS::ElastiCache::SubnetGroup'
    Properties:
      Description: Subnet group for ElastiCache
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2

  RedisSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Security group for ElastiCache and Lambda
      VpcId: !Ref MyVPC

  RedisIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RedisSecurityGroup
      SourceSecurityGroupId: !Ref RedisSecurityGroup
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535

  ServerlessCrudApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: "serverless-crud-api"
      StageName: "Prod"
      Cors:
        AllowMethods: "'POST,GET,PUT,DELETE,OPTIONS'"
        AllowOrigin: "'*'"
        AllowHeaders: "'Content-Type'"
  

Outputs:
  DynamoDBSalesTable:
    Description: DynamoDB Sales Table
    Value: !Ref SalesTable
  # WebEndpoint:
  #   Description: API Gateway endpoint URL for dev stage
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  RedisUrl:
    Description: Redis Cluster Endpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
  RedisPort:
    Description: Redis Cluster Port
    Value: !GetAtt RedisCluster.RedisEndpoint.Port
  SQSqueueName:
    Description: SQS queue name
    Value: !GetAtt SQSQueue.QueueName
  SQSqueueARN:
    Description: SQS queue ARN
    Value: !GetAtt SQSQueue.Arn
  SQSqueueURL:
    Description: SQS queue URL
    Value: !GetAtt SQSQueue.QueueUrl