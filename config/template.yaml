AWSTemplateFormatVersion: 2010-09-09
Description: >-
  ticketear
Transform:
- AWS::Serverless-2016-10-31

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    # Layers:
    #     - !Ref RuntimeDependenciesLayer
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        STAGE: dev
        SALES_TABLE: !Ref SalesTable
        REDIS_URL: !GetAtt RedisCluster.RedisEndpoint.Address
        REDIS_PORT: !GetAtt RedisCluster.RedisEndpoint.Port
        # REDIS_LAMBDA: !GetAtt ElasticacheManager.Arn
        # REDIS_USERNAME: '{{resolve:secretsmanager:redis-caching-credentials:SecretString:username}}'
        # REDIS_AUTH_TOKEN: '{{resolve:secretsmanager:redis-caching-credentials:SecretString:authToken}}'
    Runtime: nodejs20.x
    MemorySize: 128
    Timeout: 30
    Architectures:
      - arm64
      # - x86_64


# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:

  ################################
  #####  Lambdas Resources   #####
  ################################
  # Each Lambda function is defined by properties:
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  GetGetIntoWaitingQueue:
    Type: AWS::Serverless::Function
    Properties:
      Handler: get-get-into-waiting-queue.handler
      CodeUri: ../dist/handlers/
      Policies:
        # Give Create/Read/Update/Delete Permissions to the SalesTable
      - DynamoDBCrudPolicy:
          TableName: !Ref SalesTable
      Events:
        Api:
          Type: Api
          Properties:
            Path: /get-into-waiting-queue
            Method: GET
  
  # GetCheckWaitingQueue:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: get-check-waiting-queue.handler
  #     CodeUri: ../dist/handlers/
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SalesTable
  #     - DynamoDBCrudPolicy:
  #         TableName: !Ref SalesTable
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /get-check-waiting-queue/{id}
  #           Method: GET

  # GetListAllTokensAtWaitingList:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: get-list-all-tokens-at-waiting-list.handler
  #     CodeUri: ../dist/handlers/
  #     Policies:
  #       # Give Create/Read/Update/Delete Permissions to the SalesTable
  #     - DynamoDBCrudPolicy:
  #         TableName: !Ref SalesTable
  #     Events:
  #       Api:
  #         Type: Api
  #         Properties:
  #           Path: /list-all-tokens-at-waiting-list
  #           Method: GET
  
  ElasticacheManager:
    Type: 'AWS::Serverless::Function'
    Properties:
      Handler: elasticache-manager.handler
      CodeUri: ../dist/handlers/
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      VpcConfig:
        SubnetIds:
          - !Ref PrivateSubnet
        SecurityGroupIds:
          - !Ref RedisSecurityGroup

  ################################
  ##### Databases Resources  #####
  ################################
  # DynamoDB table to store item: {id: &lt;ID&gt;, name: &lt;NAME&gt;}
  SalesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 2
        WriteCapacityUnits: 2
    
  RedisCluster:
    Type: 'AWS::ElastiCache::CacheCluster'
    Properties:
      CacheNodeType: cache.t2.small
      Engine: redis
      NumCacheNodes: 1
      VpcSecurityGroupIds:
        - !GetAtt RedisSecurityGroup.GroupId
      # CacheSubnetGroupName: !Ref CacheSubnetGroup


  ################################
  ##### Networking Resources #####
  ################################

  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.1.0/24

  RedisSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for Lambda to access ElastiCache'
      VpcId: !Ref MyVPC

  RedisIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref RedisSecurityGroup
      SourceSecurityGroupId: !Ref RedisSecurityGroup
      IpProtocol: tcp
      FromPort: 6379
      ToPort: 6379

  CustomEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: 'CustomEventBus'
  # CacheSubnetGroup:
  #   Type: 'AWS::ElastiCache::SubnetGroup'
  #   Properties:
  #     Description: 'Subnet group for ElastiCache'
  #     SubnetIds:
  #       - !Ref PrivateSubnet1

Outputs:
  WebEndpoint:
    Description: API Gateway endpoint URL for dev stage
    # Value:
    #     Fn::GetAtt: getTokenUrl.FunctionUrl
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/dev/"
  RedisUrl:
    Description: Redis Cluster Endpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
  RedisPort:
    Description: Redis Cluster Port
    Value: !GetAtt RedisCluster.RedisEndpoint.Port
  RedisLambda:
    Description: Redis Lambda Arn
    Value: !Ref  ElasticacheManager
  #   # http://607a5a09d5d45a8febd22d62c9bb672e.lambda-url.us-east-1.localhost.localstack.cloud:4566/